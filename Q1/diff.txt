diff -Nur linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl copylinux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-17 12:01:22.000000000 +0530
+++ copylinux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-12-04 13:54:31.888011369 +0530
@@ -361,7 +361,8 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
-
+440	common	sh_task_info		sys_sh_task_info
+441 common  rtnice          sys_rtnice
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation. The __x32_compat_sys stubs are created
diff -Nur linux-5.9.1/include/linux/sched.h copylinux-5.9.1/include/linux/sched.h
--- linux-5.9.1/include/linux/sched.h	2020-10-17 12:01:22.000000000 +0530
+++ copylinux-5.9.1/include/linux/sched.h	2020-12-04 13:56:13.340012539 +0530
@@ -460,6 +460,7 @@
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
+	u64				rt_nice;
 
 	struct sched_statistics		statistics;
 
diff -Nur linux-5.9.1/kernel/sched/core.c copylinux-5.9.1/kernel/sched/core.c
--- linux-5.9.1/kernel/sched/core.c	2020-10-17 12:01:22.000000000 +0530
+++ copylinux-5.9.1/kernel/sched/core.c	2020-12-04 13:57:34.652013477 +0530
@@ -3070,6 +3070,7 @@
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	p->se.rt_nice			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff -Nur linux-5.9.1/kernel/sched/fair.c copylinux-5.9.1/kernel/sched/fair.c
--- linux-5.9.1/kernel/sched/fair.c	2020-10-17 12:01:22.000000000 +0530
+++ copylinux-5.9.1/kernel/sched/fair.c	2020-12-04 14:11:49.260023337 +0530
@@ -534,6 +534,14 @@
 static inline int entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
+	if(a->rt_nice>0 || b->rt_nice>0)	{
+		if(a->rt_nice > b->rt_nice)	{
+			return 1;
+		}
+		else	{
+			return 0;
+		}
+	}
 	return (s64)(a->vruntime - b->vruntime) < 0;
 }
 
@@ -860,7 +868,17 @@
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
-	curr->vruntime += calc_delta_fair(delta_exec, curr);
+	if(curr->rt_nice!=0)	{
+		if(curr->rt_nice<=delta_exec)	{
+			curr->rt_nice = 0;
+		}
+		else	{
+			curr->rt_nice = curr->rt_nice - delta_exec;
+		}
+	}
+	else	{
+		curr->vruntime += calc_delta_fair(delta_exec, curr);
+	}
 	update_min_vruntime(cfs_rq);
 
 	if (entity_is_task(curr)) {
@@ -6844,7 +6862,7 @@
 {
 	s64 gran, vdiff = curr->vruntime - se->vruntime;
 
-	if (vdiff <= 0)
+	if(vdiff<=0)	{
 		return -1;
 
 	gran = wakeup_gran(se);
diff -Nur linux-5.9.1/kernel/sys.c copylinux-5.9.1/kernel/sys.c
--- linux-5.9.1/kernel/sys.c	2020-10-17 12:01:22.000000000 +0530
+++ copylinux-5.9.1/kernel/sys.c	2020-12-04 14:24:02.888031802 +0530
@@ -2629,6 +2629,65 @@
 	return 0;
 }
 
+SYSCALL_DEFINE2(sh_task_info, pid_t, pid, char *, path)
+{
+	struct task_struct *task;
+	struct file *f;
+	char fpath[256];
+	long copied = strncpy_from_user(fpath, path, sizeof(fpath));
+	if(copied<0 || copied==sizeof(fpath))	{
+		return -EFAULT;
+	}
+	f = filp_open(fpath, O_CREAT|O_WRONLY|O_TRUNC, 0644);
+	task = find_get_task_by_vpid(pid);
+	if(!task)	{
+		printk(KERN_ALERT "no such process found\n");
+		return -ESRCH;
+	}
+	// KERN_ERR for also printing to console
+	printk(KERN_INFO "pid :%ld\nname :%s\nvruntime :%lld\nstate :%ld\npriority :%d\n", task->pid, task->comm, task->se.vruntime, task->state, task->prio);
+	if(IS_ERR(f) || f==NULL)	{
+		printk(KERN_ALERT "file cannot be opened\n");
+		return -ENOENT;
+	}
+	loff_t offset = 0;
+	char buf[200];
+	sprintf(buf, "pid :%ld\nname :%s\nvruntime :%lld\nstate :%ld\npriority :%d\n", task->pid, task->comm, task->se.vruntime, task->state, task->prio);
+	kernel_write(f, buf, strlen(buf), &f->f_pos);
+	filp_close(f, NULL);
+	put_task_struct(task);
+	return 0;
+}
+
+SYSCALL_DEFINE2(rtnice, pid_t, pid, long, rtval)
+{
+	int found = 0;
+	struct task_struct *process;
+	if(pid<0)	{
+		printk("invalid process id");
+		return -EIO;
+	}
+	if(rtval<0)	{
+		printk("invalid time value");
+		return -EIO;
+	}
+
+	for_each_process(process)	{
+		if(process->pid==pid)	{
+			found = 1;
+			process->se.rt_nice = rtval;
+			printk("changed rt_nice value of %s", process->comm);
+		}
+	}
+
+	if(found==0)	{
+		printk("No such process");
+		return -ESRCH;
+	}
+
+	return 0;
+}
+
 #ifdef CONFIG_COMPAT
 struct compat_sysinfo {
 	s32 uptime;